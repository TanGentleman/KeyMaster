# Standard library imports
import re
from os import path
from typing import List

# KeyMaster imports
from utils.config import ROOT

DEFAULT_FILE = 'keySimulator.py'
FILE_TO_WRITE = 'docstrings.py'

def find_instances(string: str) -> List[str]:
    classPattern = r'class .*?""".*?"""'
    functionPattern = r'def .*?""".*?"""'
    # pattern = r'c.*?(?=b).*b' # Regular expression pattern
    # Use first class match only
    class_matches = re.findall(classPattern, string, re.DOTALL)[:1]
    # add onto class_matches
    function_matches = re.findall(functionPattern, string, re.DOTALL)
    # return combined list of matches
    print(f'{len(class_matches)} classes found and {len(function_matches)} functions found')
    return class_matches + function_matches

def read_file(filename: str) -> str | None:
    absolute_filepath = path.join(ROOT, filename)
    try:
        with open(absolute_filepath, 'r') as f:
            return f.read()
    except FileNotFoundError:
        print(f"File {filename} not found")
        return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

from os import path

def write_file(filename: str, contents: str) -> None:
    """
    Write the given string to a file with the specified filename.
    If the file already exists, a new filename will be generated by appending a number to the base filename.
    """
    absolute_filepath = path.join(ROOT, filename)

    if path.exists(absolute_filepath):
        print(f"File {filename} already exists")

        base_filename, extension = path.splitext(filename)
        if len(base_filename) > 50:
            base_filename = base_filename[:50]

        i = 1
        new_filename = ""
        while path.exists(absolute_filepath):
            new_filename = f'{base_filename}_{i}{extension}'
            absolute_filepath = path.join(ROOT, new_filename)
            i += 1

        filename = new_filename

    try:
        with open(absolute_filepath, 'w') as f:
            f.write(contents)
            print(f"Saved file to {filename}!")
    except Exception as e:
        print(f"An error occurred: {e}")
        return

def create_docstring_file_from_string(read_filename: str, write_filename: str) -> None:
    # Read file keyParser.py as string
    file_as_string = read_file(read_filename)
    if file_as_string is None:
        print('No file read')
        return
    # Find all instances of docstrings
    truncated_instances_list = find_instances(file_as_string)
    if truncated_instances_list is []:
        print('No docstrings found')
        return
    # Create a string with a newline between each instance
    docstrings_as_string = '\n'.join(truncated_instances_list)
    # Save instances to docstrings.py
    write_file(write_filename, docstrings_as_string)

if __name__ == "__main__":
    from sys import argv as args
    length = len(args)
    if length > 1:
        file_as_string = args[1]
        if path.exists(file_as_string):
            file_to_read = file_as_string
            print(f"Parsing {file_to_read}.")
            create_docstring_file_from_string(file_to_read, FILE_TO_WRITE)
    else:
        file_to_read = DEFAULT_FILE
        print(f"Using default file {file_to_read}")
        create_docstring_file_from_string(file_to_read, FILE_TO_WRITE)
